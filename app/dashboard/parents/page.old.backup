'use client'

import { useState, useEffect } from 'react'
import { useSession } from 'next-auth/react'
import { useRouter } from 'next/navigation'

interface Child {
  id: string
  name: string
  gender: 'son' | 'daughter'
  code: string
  codeExpires: Date
  avatar?: string
  tasksCompleted: number
  totalPoints: number
}

export default function ParentsDashboard() {
  const { data: session } = useSession()
  const router = useRouter()
  const [showMembersModal, setShowMembersModal] = useState(false)
  const [children, setChildren] = useState<Child[]>([])
  const [newChildName, setNewChildName] = useState('')
  const [newChildGender, setNewChildGender] = useState<'son' | 'daughter'>('son')
  const [loading, setLoading] = useState(false)

  // Dados de exemplo - depois vamos buscar do banco
  const stats = {
    totalTasks: 12,
    completedToday: 8,
    totalPoints: 450,
    activeChildren: children.length
  }

  const generateCode = () => {
    const timestamp = Date.now().toString(36).toUpperCase()
    const random = Math.random().toString(36).substring(2, 8).toUpperCase()
    return `PLANET-${timestamp}-${random}`
  }

  const handleAddChild = () => {
    if (!newChildName.trim()) return

    const newChild: Child = {
      id: Date.now().toString(),
      name: newChildName,
      gender: newChildGender,
      code: generateCode(),
      codeExpires: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days
      tasksCompleted: 0,
      totalPoints: 0
    }

    setChildren([...children, newChild])
    setNewChildName('')
    setNewChildGender('son')
  }

  const regenerateCode = (childId: string) => {
    setChildren(children.map(child => 
      child.id === childId 
        ? { ...child, code: generateCode(), codeExpires: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) }
        : child
    ))
  }

  const copyCode = (code: string) => {
    navigator.clipboard.writeText(code)
    alert('Código copiado!')
  }

  return (
    <div className="min-h-screen w-full relative overflow-hidden" style={{
      background: 'linear-gradient(135deg, #1B0337 0%, #2D1B69 50%, #1B0337 100%)'
    }}>
      {/* Partículas de fundo */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        {[...Array(50)].map((_, i) => (
          <div
            key={i}
            className="absolute rounded-full bg-white opacity-20"
            style={{
              width: Math.random() * 3 + 1 + 'px',
              height: Math.random() * 3 + 1 + 'px',
              top: Math.random() * 100 + '%',
              left: Math.random() * 100 + '%',
              animation: `float ${Math.random() * 10 + 10}s linear infinite`,
              animationDelay: `-${Math.random() * 10}s`
            }}
          />
        ))}
      </div>

      {/* Header */}
      <div className="relative z-10 p-8">
        <div className="max-w-7xl mx-auto">
          <div className="flex justify-between items-center mb-8">
            <div>
              <h1 className="text-4xl font-bold text-white mb-2" style={{ fontFamily: 'Poppins' }}>
                🪐 Dashboard dos Pais
              </h1>
              <p className="text-purple-200">Bem-vindo, {session?.user?.name || 'Responsável'}!</p>
            </div>
            <button
              onClick={() => router.push('/')}
              className="px-6 py-3 rounded-full bg-red-500/20 text-white hover:bg-red-500/30 transition-all backdrop-blur-sm border border-red-300/30"
            >
              🚪 Sair
            </button>
          </div>

          {/* Stats Cards */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            {[
              { icon: '✅', label: 'Tarefas Hoje', value: stats.completedToday, total: stats.totalTasks, color: 'from-green-500 to-emerald-600' },
              { icon: '🏆', label: 'Pontos Totais', value: stats.totalPoints, color: 'from-yellow-500 to-orange-600' },
              { icon: '👨‍👩‍👧‍👦', label: 'Crianças Ativas', value: stats.activeChildren, color: 'from-blue-500 to-cyan-600' },
              { icon: '🎯', label: 'Meta Semanal', value: '75%', color: 'from-purple-500 to-pink-600' },
            ].map((stat, idx) => (
              <div
                key={idx}
                className="p-6 rounded-2xl backdrop-blur-md border border-white/10 shadow-2xl"
                style={{
                  background: 'rgba(255, 255, 255, 0.05)'
                }}
              >
                <div className={`text-4xl mb-3 bg-gradient-to-r ${stat.color} bg-clip-text text-transparent`}>
                  {stat.icon}
                </div>
                <div className="text-white text-3xl font-bold mb-1">
                  {stat.value}{stat.total ? `/${stat.total}` : ''}
                </div>
                <div className="text-purple-200 text-sm">{stat.label}</div>
              </div>
            ))}
          </div>

          {/* Main Actions */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            {/* Botão de Membros */}
            <button
              onClick={() => setShowMembersModal(true)}
              className="p-8 rounded-2xl backdrop-blur-md border border-white/10 shadow-2xl hover:scale-105 transition-all group"
              style={{
                background: 'rgba(139, 92, 246, 0.1)'
              }}
            >
              <div className="flex items-center gap-4">
                <div className="text-6xl group-hover:scale-110 transition-transform">
                  👨‍👩‍👧‍👦
                </div>
                <div className="text-left">
                  <h3 className="text-2xl font-bold text-white mb-2">Gerenciar Membros</h3>
                  <p className="text-purple-200">Ver crianças e códigos de acesso</p>
                </div>
              </div>
            </button>

            {/* Botão de Tarefas */}
            <button
              className="p-8 rounded-2xl backdrop-blur-md border border-white/10 shadow-2xl hover:scale-105 transition-all group"
              style={{
                background: 'rgba(59, 130, 246, 0.1)'
              }}
            >
              <div className="flex items-center gap-4">
                <div className="text-6xl group-hover:scale-110 transition-transform">
                  ✅
                </div>
                <div className="text-left">
                  <h3 className="text-2xl font-bold text-white mb-2">Gerenciar Tarefas</h3>
                  <p className="text-purple-200">Criar e atribuir tarefas</p>
                </div>
              </div>
            </button>
          </div>

          {/* Children Overview */}
          {children.length > 0 && (
            <div className="p-6 rounded-2xl backdrop-blur-md border border-white/10 shadow-2xl"
              style={{ background: 'rgba(255, 255, 255, 0.05)' }}
            >
              <h3 className="text-2xl font-bold text-white mb-6">🌟 Ranking das Crianças</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {children.map((child, idx) => (
                  <div key={child.id} className="p-4 rounded-xl bg-white/5 border border-white/10">
                    <div className="flex items-center gap-3 mb-3">
                      <div className="text-3xl">{child.gender === 'son' ? '👦' : '👧'}</div>
                      <div>
                        <div className="text-white font-bold">{child.name}</div>
                        <div className="text-purple-200 text-sm">{child.totalPoints} pontos</div>
                      </div>
                    </div>
                    <div className="text-sm text-purple-300">
                      ✅ {child.tasksCompleted} tarefas concluídas
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Modal de Membros */}
      {showMembersModal && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-gradient-to-br from-purple-900/90 to-indigo-900/90 rounded-3xl p-8 max-w-4xl w-full max-h-[90vh] overflow-y-auto border border-white/20 shadow-2xl">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-3xl font-bold text-white">👨‍👩‍👧‍👦 Membros da Família</h2>
              <button
                onClick={() => setShowMembersModal(false)}
                className="text-white text-3xl hover:bg-white/10 rounded-full w-10 h-10 flex items-center justify-center"
              >
                ×
              </button>
            </div>

            {/* Lista de Crianças */}
            <div className="space-y-4 mb-6">
              {children.map((child) => (
                <div key={child.id} className="p-6 rounded-2xl bg-white/10 border border-white/20">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center gap-4">
                      <div className="text-5xl">{child.gender === 'son' ? '👦' : '👧'}</div>
                      <div>
                        <h3 className="text-xl font-bold text-white">{child.name}</h3>
                        <p className="text-purple-200">
                          {child.gender === 'son' ? 'Filho' : 'Filha'}
                        </p>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-2xl font-bold text-yellow-400">{child.totalPoints} pts</div>
                      <div className="text-purple-200 text-sm">{child.tasksCompleted} tarefas</div>
                    </div>
                  </div>

                  {/* Código de Acesso */}
                  <div className="bg-black/30 rounded-xl p-4 border border-purple-400/30">
                    <div className="text-purple-200 text-sm mb-2">🔑 Código de Acesso</div>
                    <div className="flex items-center gap-3">
                      <code className="flex-1 text-2xl font-mono font-bold text-white bg-purple-500/20 px-4 py-3 rounded-lg">
                        {child.code}
                      </code>
                      <button
                        onClick={() => copyCode(child.code)}
                        className="px-4 py-3 bg-blue-500 hover:bg-blue-600 rounded-lg text-white font-medium transition-colors"
                      >
                        📋 Copiar
                      </button>
                      <button
                        onClick={() => regenerateCode(child.id)}
                        className="px-4 py-3 bg-orange-500 hover:bg-orange-600 rounded-lg text-white font-medium transition-colors"
                      >
                        🔄 Novo
                      </button>
                    </div>
                    <div className="text-xs text-purple-300 mt-2">
                      ⏱️ Expira em: {new Date(child.codeExpires).toLocaleDateString('pt-BR')}
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {/* Adicionar Nova Criança */}
            <div className="p-6 rounded-2xl bg-gradient-to-r from-green-500/20 to-emerald-500/20 border border-green-400/30">
              <h3 className="text-xl font-bold text-white mb-4">➕ Adicionar Nova Criança</h3>
              <div className="space-y-4">
                <input
                  type="text"
                  value={newChildName}
                  onChange={(e) => setNewChildName(e.target.value)}
                  placeholder="Nome da criança"
                  className="w-full px-4 py-3 rounded-lg bg-white/10 border border-white/20 text-white placeholder-purple-300 focus:outline-none focus:border-green-400"
                />
                <div className="flex gap-4">
                  <button
                    onClick={() => setNewChildGender('son')}
                    className={`flex-1 px-6 py-3 rounded-lg font-medium transition-all ${
                      newChildGender === 'son'
                        ? 'bg-blue-500 text-white'
                        : 'bg-white/10 text-purple-200 hover:bg-white/20'
                    }`}
                  >
                    👦 Filho
                  </button>
                  <button
                    onClick={() => setNewChildGender('daughter')}
                    className={`flex-1 px-6 py-3 rounded-lg font-medium transition-all ${
                      newChildGender === 'daughter'
                        ? 'bg-pink-500 text-white'
                        : 'bg-white/10 text-purple-200 hover:bg-white/20'
                    }`}
                  >
                    👧 Filha
                  </button>
                </div>
                <button
                  onClick={handleAddChild}
                  disabled={!newChildName.trim()}
                  className="w-full px-6 py-4 bg-green-500 hover:bg-green-600 disabled:bg-gray-500 disabled:cursor-not-allowed rounded-lg text-white font-bold text-lg transition-colors"
                >
                  ✨ Adicionar Criança e Gerar Código
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      <style jsx global>{`
        @keyframes float {
          0%, 100% {
            transform: translateY(0px) translateX(0px);
          }
          50% {
            transform: translateY(-20px) translateX(10px);
          }
        }
      `}</style>
    </div>
  )
}
